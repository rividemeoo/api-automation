pipeline {
    agent {
        docker {
            // Specify the Docker image that will be used for the agent
            image 'test_docker:tag'
            // Define any additional arguments or options for the Docker run command
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        recipientEmails = "test_jenkins@loopup.co"
    }
    
    stages {
        stage('Delete docker container and image if exist') {
            steps {
                powershell '''
                    try {
                        $containerName = 'test_doc_container'
                        $existingContainerId = docker ps -aqf "name=$containerName"

                        if ($existingContainerId) {
                            Write-Host "Container $containerName exists. Deleting..."
                            docker rm -f $existingContainerId
                        } else {
                            Write-Host "Container $containerName does not exist."
                        }
                        
                        $imageName = 'test_doc_image'
                        $existingImageId = docker images -q $imageName

                        if ($existingImageId) {
                            Write-Host "Image $imageName exists. Deleting..."
                            docker rmi -f $existingImageId
                        } else {
                            Write-Host "Image $imageName does not exist."
                        }
                    } catch {
                        Write-Host "Failed to prepare: $_"
                    }
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build --pull --rm -f "Python\\Dockerfile" -t test_doc_image "Python"'
            }
        }
        
        stage('Running Docker Image and Container') {
            steps {
                bat 'docker run -d --name test_doc_container -e PYTHON_ENVIRONMENT=engr test_doc_image'
                powershell '''
                    $timeout = 120
                    $startTime = Get-Date
                    $loopCounter = 0

                    while ($true) {
                        $loopCounter++
                        $status = docker inspect -f "{{.State.Status}}" test_doc_container
                              
                        if ($status -eq "running") {
                            Write-Host "Retry check number $loopCounter - Container status: $status"
                        } else {
                            Write-Host "Retry check number $loopCounter - Container status: $status"
                            break
                        }
                        
                        $elapsedTime = (Get-Date) - $startTime
                        if ($elapsedTime.TotalSeconds -ge $timeout) {
                            Write-Host "Timed out waiting for the container to start."
                            exit 1
                        }
                        
                        Start-Sleep -Seconds 5
                    }
                '''
            }
        }

        stage('Check Container Logs') {
            steps {
                script {
                    try {
                        def containerLogs = powershell(returnStdout: true, script: '''
                            $containerLogs = docker logs test_doc_container
                            Write-Host "Container Logs:"
                            Write-Host $containerLogs

                            if ($containerLogs -match "AssertionError") {
                                Write-Host "Error found in container logs."
                                throw "AssertionError found in container logs"
                            }
                        ''')
                        
                        echo "Container logs checked successfully."
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }

    post {
        always {
            emailext subject: "Build ${currentBuild.result}: ${currentBuild.fullDisplayName}",
                body: """
                Build ${currentBuild.result}: ${currentBuild.fullDisplayName}<br>
                Build URL: ${env.BUILD_URL}<br>
                Build Status: ${currentBuild.result}<br>
                Job: ${env.JOB_NAME}<br>
                Workspace: ${env.WORKSPACE}<br>
                Executor: ${env.NODE_NAME}<br>
                
                Check the console output for details.
                """,
                to: "${recipientEmails}",
                replyTo: 'noreply@loopup.co',
                attachLog: true
                }
    }
}